<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>PCD India</title>

    <link rel="stylesheet" type="text/css" href="{{ '/style.css' | url }}">
    <style>
      button {
        -webkit-tap-highlight-color: transparent;
        -webkit-touch-callout: none;
        -webkit-user-select: none;
        -khtml-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
      }

      ::-webkit-scrollbar {
        width: 0;  /* Remove scrollbar space */
        background: transparent;  /* Optional: just make scrollbar invisible */
      }

      .text-shadow {
        text-shadow: 0 0 0.2em blue;
      }

      .purple-test {
        background-color: #D7D5EB;
      }

      .blue-underline {
        background-image: linear-gradient(#D7D5EB 0%, #D7D5EB 100%);
        background-repeat: no-repeat;
        background-size: 120% 0.5rem;
        background-position: 0 110%;
      }

    </style>

    <script src="{{ '/static/js/libs/p5.min.js' | url }}"></script>
    <script src="{{ '/static/js/libs/p5.sound.min.js' | url }}"></script>

    <script src="{{ '/static/js/nav/camera.js' | url }}"></script>
    <script src="{{ '/static/js/nav/user.js' | url }}"></script>
    <script src="{{ '/static/js/nav/door.js' | url }}"></script>
    <script src="{{ '/static/js/nav/building.js' | url }}"></script>
  </head>

  <body>
    <div id="canvas" class="overflow-hidden">
    </div>
    <div id="loader">
    </div>
    <div id="p5_loading" class="loadingclass"></div>

    {# modals for user pages #}
    <div id="modal">
      {% for page in pages %}
      <div id="room{{loop.index-1}}" class="hidden absolute inset-0 w-full h-screen  ">
        <div class="w-full h-full">
          
          <div class="flex h-full justify-center">
            <div class="relative md:py-12 md:px-24 md:w-4/6
                        grid grid-rows-4 grid-cols-3 items-center
                        px-6 py-10 bg-blue-100 border border-black">
              <div class="row-start-1 col-span-full self-start">
                <span>you've come to</span>
                <br>
                <span class="text-2xl md:text-4xl font-bold uppercase">
                  {{ page.name }}
                </span>
                <span>'s room</span>
                <br>
                <span class="inline-block text-2xl md:text-4xl font-bold uppercase text-purple-100
                            transform -scale-y-100 translate-x-2 -translate-y-4 md:-translate-y-6 md:translate-x-4 skew-x-48"> {{ page.name }} </span>
              </div>

              <div class="row-start-2 row-end-4 col-start-1 col-end-3 
                          md:row-start-3 md:row-end-5
                          h-full w-full p-2 bg-white text-xs md:text-sm lowercase z-20">
                {% if page.pronoun %}
                <p >{{ page.pronoun }} works with
                  
                    {% for interest in page.interests %}
                    <span class="text-sm md:text-base font-bold blue-underline">{{ interest }}</span> 
                    {% if loop.last !== true %}
                    <span>&</span>
                    {% endif %}
                    {% endfor %}
                  
                </p>
                <p >{{ page.pronoun }} is inspired by
                  
                    {% for inspo in page.inspirations %}
                    <span class="text-sm md:text-base font-bold blue-underline">{{ inspo }}</span>
                    {% if loop.last !== true %}
                    <span>&</span>
                    {% endif %}
                    {% endfor %}

                  
                </p>

                <p >{{ page.pronoun }} calls 
                  <span class="text-sm md:text-base font-bold blue-underline">{{ page.city }}</span> 
                home</p>

                <p >if {{ page.pronoun }} could have one superpower, it would be 
                  <span class="text-sm md:text-base font-bold blue-underline">{{ page.superpower }}</span>
                </p>

                {% else %}
                <p>{{ page.desc }}</p>
                {% endif %}
              </div>
              <div class="row-start-3 row-end-5 col-start-2 col-end-4
                          md:row-start-2 md:row-end-4
                          w-full h-full bg-purple-100 z-10">
                <div class="">

                </div>
              </div>
              <button class="absolute top-10 right-6 md:top-12 md:right-24 w-6 h-6" onclick="closeModal(this)">X</button>
            </div>

            {# <div class="h-1/2 w-1/2 flex-none self-center">
              <embed class="overflow-hidden h-full w-full pointer-events-none " src={{page.src}} />
            </div> #}
          </div>
        </div>
        
        
      </div>
      {% endfor %}
      <div id="empty-room" class="hidden absolute inset-0 flex w-screen h-screen items-center justify-center">
        <div class="w-10/12 h-5/6 overflow-scroll p-4
                    border-4 border-black bg-white shadow">
          <div class="flex justify-between">
            <p class="bg-yellow-300 uppercase px-2"> empty room </p>
            <button onclick="closeModal(this)">X</button>
          </div>
        </div>
      </div>
    </div>

    {# game navigation control for mobile #}
    <div id="nav-mobile" class="hidden md:hidden absolute inset-x-0 bottom-0
                flex justify-around py-4
                select-none">
      <div class="w-24 h-24 bg-purple shadow p-2
                  grid grid-rows-3 grid-cols-3
                  rounded-full border border-black">
      
        <button class="nav-button col-start-2 row-start-1 outline-none bg-white rounded-full" 
                ontouchend="buttonReleased(UP_ARROW)" ontouchstart="buttonPressed(UP_ARROW)">
                {% imagemd "src/static/images/up-arrow.png", "up arrow", "(min-width: 30em) 50vw, 100vw" %}
        </button>
        <button class="nav-button col-start-3 row-start-2 outline-none bg-white rounded-full" 
                ontouchend="buttonReleased(RIGHT_ARROW)" ontouchstart="buttonPressed(RIGHT_ARROW)">
                {% imagemd "src/static/images/right-arrow.png", "right arrow", "(min-width: 30em) 50vw, 100vw" %}
        </button>
        <button class="nav-button col-start-1 row-start-2 outline-none bg-white rounded-full" 
                ontouchend="buttonReleased(LEFT_ARROW)" ontouchstart="buttonPressed(LEFT_ARROW)">
                {% imagemd "src/static/images/left-arrow.png", "left arrow", "(min-width: 30em) 50vw, 100vw" %}
        </button>
        <button class="nav-button col-start-2 row-start-3 outline-none bg-white rounded-full" 
                ontouchend="buttonReleased(DOWN_ARROW)" ontouchstart="buttonPressed(DOWN_ARROW)">
                {% imagemd "src/static/images/down-arrow.png", "down arrow", "(min-width: 30em) 50vw, 100vw" %}
        </button>
      </div>
    </div>

    <script src="{{ '/static/js/nav/sketch.js' | url }}"></script>
    <script src="{{ '/static/js/loadingSketch.js' | url }}"></script>
    <script>
      let loadingSketch = new p5(LoadingSketch, 'loader');
      let cnv, ctx
      document.addEventListener('appLoaded', () => {
        cnv = document.getElementById('canvas').children[0]
        ctx = cnv.getContext('2d')
        loadingSketch.remove(); 
        document.body.classList.add('loaded'); 
      });
      document.addEventListener('blurCanvas', () => {
        ctx.filter = "blur(12px)"
        {# document.getElementById('nav-mobile').classList.toggle('hidden') #}
      });
      document.addEventListener('unblurCanvas', () => {
        ctx.filter = "none"
        {# document.getElementById('nav-mobile').classList.toggle('hidden') #}
      });

      const closeModal = (btn) => {
        const modal = btn.parentNode.parentNode
        modal.classList.toggle('hidden')
        
        document.dispatchEvent(new CustomEvent('unblurCanvas'))
      }
      const handleLongPress = (e) => {
        e.preventDefault()
      } 
      const navButtons = document.querySelectorAll('.nav-button')
      navButtons.forEach(el => {
        el.addEventListener('contextmenu', handleLongPress)
      })

      function buttonPressed(keyCode) {
        let key
        switch(keyCode) {
          case LEFT_ARROW:
            key = "ArrowLeft"
            break
          case RIGHT_ARROW:
            key = "ArrowRight"
            break
          case UP_ARROW:
            key = "ArrowUp"
            break
          case DOWN_ARROW:
            key = "ArrowDown"
            break
        }
        let keyEvent = new KeyboardEvent('keydown', {
          keyCode: keyCode, 
          key: key, 
          code: key,
          bubbles: true,
          cancelable: true  
        })
        document.body.dispatchEvent(keyEvent)
      }
      function buttonReleased(keyCode) {
        let key
        switch(keyCode) {
          case LEFT_ARROW:
            key = "ArrowLeft"
            break
          case RIGHT_ARROW:
            key = "ArrowRight"
            break
          case UP_ARROW:
            key = "ArrowUp"
            break
          case DOWN_ARROW:
            key = "ArrowDown"
            break
        }
        let keyEvent = new KeyboardEvent('keyup', {
          keyCode: keyCode, 
          key: key, 
          code: key,
          bubbles: true,
          cancelable: true  
        })
        document.body.dispatchEvent(keyEvent)
      }
    </script>
  </body>

  
</html>
