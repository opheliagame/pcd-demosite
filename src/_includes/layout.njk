<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="author" content="opheliagame">
  <meta name="description" content="PCD India is a community of creative coding enthusiasts, tech artists, designers, live coders, data nerds, musicians, architects, paper engineers and artists whose practices contain these and more elements. We are a group of enthu cutlets who love experimentation and sharing, come hang out!">
  <meta property="og:image" content="https://pbs.twimg.com/profile_images/1286184924102311937/C2J5e8TX_400x400.jpg">
  <meta property="og:description" content="PCD India is a community of creative coding enthusiasts, tech artists, designers, live coders, data nerds, musicians, architects, paper engineers and artists whose practices contain these and more elements. We are a group of enthu cutlets who love experimentation and sharing, come hang out!">
  <meta property="og:title" content="PCD India">
  <meta property="twitter:description" content="PCD India is a community of creative coding enthusiasts, tech artists, designers, live coders, data nerds, musicians, architects, paper engineers and artists whose practices contain these and more elements. We are a group of enthu cutlets who love experimentation and sharing, come hang out!">
  <meta property="twitter:title" content="PCD India">
  <meta property="twitter:creator" content="@anushkatr">
  <meta name="twitter:site" content="@ProcessingIndia" />

  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Roboto+Condensed&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="{{ '/style.css' | url }}" >
  <link rel="stylesheet" href="{{ '/extra.css' | url }}" >

  <title>{{ title }}</title>
</head>
<body class="overflow-x-hidden">
  <canvas id="mouses" class="absolute -z-10 w-screen h-screen"></canvas>
  <div id="cursor-img" class="invisible w-2 h-2">
    {% image "src/static/images/cursor.png", "cursor", "(min-width: 30em) 50vw, 100vw" %}
  </div>

  <div class="md:container md:mx-auto px-8 md:px-32 z-20">
    <div class="absolute invisible lg:visible lg:right-16 lg:top-8 lg:w-16 lg:h-12 flex flex-col">
      <span class="text-xs self-center uppercase">people</span>
      <label for="people" class="flex-1 flex p-1 items-center cursor-pointer">
        <!-- toggle -->
        <div class="relative w-full h-full">
          <!-- input -->
          <input type="checkbox" id="people" class="hidden people-toggle" onclick="turnOnPeople(this.checked)" class="sr-only">
          <!-- line -->
          <div class="block border-2 border-yellow-200 w-full h-full rounded-full"></div>
          <!-- dot -->
          <div class="dot absolute inset-y-0 left-0 bg-yellow-200 w-1/2 p-2 rounded-full transition"></div>
        </div>
      </label>
    </div>

    <div>
      {% include "partials/header.njk" %}

      {# <div class="grid grid-cols-5 grid-rows-layout gap-x-0 gap-y-4 justify-center">
        {% include "partials/nav.njk" %}
          {{ content | safe }}
      </div> #}

      {{ content | safe }}


    </div>
  </div>
  <div class="bg-yellow-200">
    <div class="md:container md:mx-auto px-8 md:px-32 z-20">
      {% include "partials/footer.njk" %}
    </div>
  </div>
  
  
  {# <script src="https://cdnjs.cloudflare.com/ajax/libs/matter-js/0.17.1/matter.min.js"></script>
  <script src="{{ '/static/js/gravitymatter.js' | url }}" ></script> #}

  {# <script>
    const skewDiv = document.querySelectorAll('.skew')
    Array.from(skewDiv).forEach(letter => {
      const x = Math.floor(Math.random()*30)
      const y = Math.floor(Math.random()*30)
      letter.style.transform = `skew(${0}deg, ${-15}deg)`
    })
  </script> #}

  <script src="https://cdn.socket.io/4.1.2/socket.io.min.js" integrity="sha384-toS6mmwu70G0fw54EGlWWeA4z3dyJ+dlXBtSURSKN4vyRFOcxd3Bzjj/AoOwY+Rg" crossorigin="anonymous"></script>
  <script>
    console.log('hello from layout')
    const enterSite = (e) => {
      e.preventDefault()
      const name = e.target[0].value
      socket.emit('new user', name)
      sessionStorage.setItem('name', name)
      e.target.parentElement.style.display = 'none'
      window.addEventListener('mousemove', emitMouse)
      window.addEventListener('touchmove', emitMouse)
    }

    const emitMouse = (e) => {
      const pos = {user: sessionStorage.getItem('name'), x: e.x, y: e.y}
      socket.emit('user move', pos)
    }

    const form = document.getElementById('nameForm')
    if(form) form.addEventListener('submit', enterSite)
    const formDiv = document.getElementById('formDiv')
    if(sessionStorage.getItem('name') !== null && formDiv !== null) {
      formDiv.style.display = 'none'
    }
    if(sessionStorage.getItem('name') !== null) {
      window.addEventListener('mousemove', emitMouse)
      window.addEventListener('touchmove', emitMouse)
    }

    const cursorImg = document.querySelector('#cursor-img picture img')
    cursorImg.addEventListener('load', () => {
      drawMouses()
    }, false)
    
    const turnOnPeople = (state) => {
      console.log('setting', state)
      sessionStorage.setItem('people', state)
      ctx.clearRect(0, 0, window.innerWidth, window.innerHeight)
    }
    const toggle = document.querySelectorAll('.people-toggle') 
    Array.from(toggle).forEach(input => {
      if(sessionStorage.getItem('people') === "true") input.checked = true
      else input.checked = false
    })

    const drawMouses = () => {
      console.log('drawing..')
      ctx.fillStyle = "rgba(255, 255, 255, 0.01)"
      ctx.fillRect(0, 0, window.innerWidth, window.innerHeight)
      if (sessionStorage.getItem('people') == false) return
      Object.keys(userMouses).forEach((user) => {
        if(user == sessionStorage.getItem('name')) return
        ctx.fillStyle = '#60A5FA'
        ctx.font = '14px monospace'
        const u = userMouses[user]
        ctx.drawImage(cursorImg, u.x, u.y, 10, 10)
        ctx.fillText(user, u.x, u.y+20)
      })
      
    }
  </script>
  <script>
    const socket = io('https://pcd-socket-server.herokuapp.com/')

    const userMouses = {}

    const onResize = () => {
      canvas.width = window.innerWidth
      canvas.height = window.innerHeight
    }
    const usersDiv = document.getElementById('users')
    const canvas = document.getElementById('mouses')
    canvas.width = window.innerWidth
    canvas.height = window.innerHeight
    canvas.addEventListener('resize', onResize)
    
    const ctx = canvas.getContext('2d')
    socket.on('new user', (user) => {
      const p = document.createElement('p')
      p.textContent = user
     
    })
    socket.on('user move', (pos) => {
      userMouses[pos.user] = {x: pos.x, y: pos.y}
      if(sessionStorage.getItem('people') === "true") drawMouses()
    }) 
  </script>
        
</body>
</html>